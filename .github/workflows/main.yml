# This workflow will install Python dependencies, set up PostgreSQL in Docker, and run tests and lint with a single version of Python

name: Python application

on:
  push:
    branches: [ "main","ci/cd" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # options: > 
        #   --health-cmd "pg_isready" 
        #   --health-interval 10s 
        #   --health-timeout 5s 
        #   --health-retries 5 

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Wait for PostgreSQL to be ready
      run: |
        docker ps
        i=0
        until pg_isready -U postgres || [ $i -ge 5 ]; do
          echo "Waiting for PostgreSQL to be ready... ($i/25)"
          i=$((i+1))
          sleep 5
        done

        # If we reached the limit, exit with an error
        if [ $i -ge 5 ]; then
          echo "PostgreSQL did not become ready in time. Exiting..."
          exit 1
        fi

    - name: Run migrations or set up the database
      run: |
        # Add any commands needed to set up your database, such as running migrations
        echo "Database setup step (optional)."

    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Run your tests
        python -m unittest ./server/tests/tests.py
